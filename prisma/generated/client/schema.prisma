generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
model Category {
  slug     String    @id
  name     String
  products Product[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  slug        String
  description String?     @db.Text
  price       Decimal
  images      Json
  storeId     String
  Store       Store       @relation(fields: [storeId], references: [id])
  categoryId  String
  Category    Category    @relation(fields: [categoryId], references: [slug])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@index([storeId, categoryId, name, slug])
}

enum TRANSACTION_STATUS {
  PENDING
  PAID
  CANCELED
}

model Order {
  id               String             @id @default(uuid())
  totalPrice       Decimal           
  token            String             @default("no coupon")
  status           TRANSACTION_STATUS @default(PENDING)
  userId           String
  User             User               @relation(fields: [userId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  orderItems       OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  storeId   String  
  store     Store   @relation(fields: [storeId], references: [id])

  @@index([orderId])
  @@index([productId])
}
model User {
  id        String      @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  image     String?
  role      String   @default("customer")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stores        Store[]
  orders        Order[]
}
model Store {
  id          String      @id @default(uuid())
  name        String
  description String?     @db.Text
  userId      String
  User        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Product     Product[]
  OrderItem   OrderItem[]
  @@index([userId])
}